{"version":3,"sources":["auth.js","graphql/client.js","MessageList.js","MessageInput.js","graphql/queries.js","Chat.js","hooks.js","Login.js","NavBar.js","App.js","index.js"],"names":["accessTokenKey","loginUrl","getUserFromToken","token","jwtDecode","sub","getAccessToken","localStorage","getItem","getLoggedInUser","login","name","password","a","fetch","method","headers","body","JSON","stringify","response","ok","json","setItem","httpLink","ApolloLink","from","operation","forward","setContext","HttpLink","uri","wsLink","WebSocketLink","options","connectionParams","accessToken","lazy","reconnect","client","ApolloClient","cache","InMemoryCache","link","split","definition","getMainDefinition","query","kind","defaultOptions","fetchPolicy","MessageList","boxRef","React","createRef","box","this","current","scrollTo","scrollHeight","messages","props","ref","className","style","height","overflowY","map","renderMessage","bind","message","user","tag","paddingLeft","text","id","Component","MessageInput","event","key","onSend","target","value","type","placeholder","onKeyPress","handleKeyPress","messagesQuery","gql","addMessageMutation","messageAddedSubscription","Chat","data","useQuery","useSubscription","onSubscriptionData","subscriptionData","writeData","concat","messageAdded","useMutation","addMessage","variables","input","useChatMessages","Login","state","error","setState","preventDefault","onLogin","onChange","handleChange","onClick","handleSubmit","NavBar","onLogout","App","removeItem","ApolloProvider","handleLogout","handleLogin","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3819f6b4.chunk.js","sourcesContent":["import jwtDecode from 'jwt-decode';\n\nconst accessTokenKey = 'accessToken';\nconst loginUrl = 'http://localhost:9000/login';\n\nfunction getUserFromToken(token) {\n  return jwtDecode(token).sub;\n}\n\nexport function getAccessToken() {\n  return localStorage.getItem(accessTokenKey);\n}\n\nexport function getLoggedInUser() {\n  const token = getAccessToken();\n  if (!token) {\n    return null;\n  }\n  return getUserFromToken(token);\n}\n\nexport async function login(name, password) {\n  const response = await fetch(loginUrl, {\n    method: 'POST',\n    headers: {\n      'content-type': 'application/json'\n    },\n    body: JSON.stringify({name, password})\n  });\n  if (!response.ok) {\n    return null;\n  }\n  const {token} = await response.json();\n  localStorage.setItem(accessTokenKey, token);\n  return getUserFromToken(token);\n}\n\nexport function logout() {\n  localStorage.removeItem(accessTokenKey);\n}\n","import {\n  ApolloClient, ApolloLink, HttpLink, InMemoryCache, split\n} from 'apollo-boost';\nimport { WebSocketLink} from 'apollo-link-ws';\nimport { getAccessToken } from '../auth';\nimport { getMainDefinition } from 'apollo-utilities';\n\nconst httpUrl = 'http://localhost:9000/graphql';\n\nconst wsUrl = 'ws://localhost:9000/graphql';\n\nconst httpLink = ApolloLink.from([\n  new ApolloLink((operation, forward) => {\n    const token = getAccessToken();\n    if (token) {\n      operation.setContext({headers: {'authorization': `Bearer ${token}`}});\n    }\n    return forward(operation);\n  }),\n  new HttpLink({uri: httpUrl})\n]);\n\nconst wsLink = new WebSocketLink({uri: wsUrl, options: {\n  connectionParams: () => ({\n    accessToken: getAccessToken()\n  }),\n  lazy: true,\n  reconnect: true\n}})\n\nfunction isSubscription(operation) {\n  const definition = getMainDefinition(operation.query);\n  return definition.kind === 'OperationDefinition' \n  && definition.operation === 'subscription';\n}\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: split(isSubscription, wsLink, httpLink),\n  defaultOptions: {query: {fetchPolicy: 'no-cache'}}\n});\n\nexport default client;\n","import React, { Component } from 'react';\n\nclass MessageList extends Component {\n  boxRef = React.createRef();\n\n  componentDidUpdate() {\n    const box = this.boxRef.current;\n    // scroll to bottom to make the last message visible\n    box.scrollTo(0, box.scrollHeight);\n  }\n\n  render() {\n    const {messages} = this.props;\n    return (\n      <div ref={this.boxRef} className=\"box\" style={{height: '50vh', overflowY: 'scroll'}}>\n        <table>\n          <tbody>\n            {messages.map(this.renderMessage.bind(this))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n\n  renderMessage(message) {\n    const {user} = this.props;\n    let tag = 'tag';\n    if (message.from === user) {\n      tag += ' is-primary';\n    }\n    return (\n      <tr key={message.id}>\n        <td><span className={tag}>{message.from}</span></td>\n        <td style={{paddingLeft: '0.75em'}}>{message.text}</td>\n      </tr>\n    )\n  }\n}\n\nexport default MessageList;\n","import React, { Component } from 'react';\n\nclass MessageInput extends Component {\n  handleKeyPress(event) {\n    if (event.key === 'Enter') {\n      this.props.onSend(event.target.value);\n      event.target.value = '';\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"box\">\n        <p className=\"control\">\n          <input className=\"input\" type=\"text\" placeholder=\"Say something...\"\n            onKeyPress={this.handleKeyPress.bind(this)} />\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default MessageInput;\n","import gql from 'graphql-tag';\n\nexport const messagesQuery = gql`\n  query MessagesQuery {\n    messages {\n      id\n      from\n      text\n    }\n  }\n`;\n\nexport const addMessageMutation = gql`\n  mutation AddMessageMutation($input: MessageInput!) {\n    message: addMessage(input: $input) {\n      id\n      from\n      text\n    }\n  }\n`;\n\nexport const messageAddedSubscription = gql `\nsubscription {\n  messageAdded {\n    id\n    from\n    text\n  }\n}`;","import React from 'react';\r\nimport MessageList from './MessageList';\r\nimport MessageInput from './MessageInput';\r\nimport { useChatMessages } from './hooks';\r\n\r\nconst Chat = ({user}) => {\r\n    const {messages, addMessage} = useChatMessages();\r\n    return (\r\n      <section className=\"section\">\r\n        <div className=\"container\">\r\n          <h1 className=\"title\">Chatting as {user}</h1>\r\n          <MessageList user={user} messages={messages} />\r\n          <MessageInput onSend={addMessage} />\r\n        </div>\r\n      </section>\r\n    );\r\n}\r\n\r\nexport default Chat;","import { useQuery, useMutation, useSubscription } from '@apollo/react-hooks';\r\nimport { addMessageMutation, messageAddedSubscription, messagesQuery } from './graphql/queries';\r\n\r\nexport function useChatMessages () {\r\n    const {data} = useQuery(messagesQuery);\r\n    const messages = data ? data.messages : [];\r\n    useSubscription(messageAddedSubscription, {\r\n        onSubscriptionData: ({client, subscriptionData}) => {\r\n            client.writeData({data: {\r\n                messages: messages.concat(subscriptionData.data.messageAdded)\r\n            }});\r\n        }\r\n    });\r\n    const [addMessage] = useMutation(addMessageMutation);\r\n    return {\r\n        messages, \r\n        addMessage: (text) => addMessage({variables: {input: {text}}})\r\n    };\r\n}","import React, { Component } from 'react';\nimport { login } from './auth';\n\nclass Login extends Component {\n  state = {name: '', password: '', error: false};\n\n  handleChange(event) {\n    const {name, value} = event.target;\n    this.setState({[name]: value});\n  }\n\n  async handleSubmit(event) {\n    event.preventDefault();\n    const {name, password} = this.state;\n    const user = await login(name, password);\n    if (user) {\n      this.props.onLogin(user);\n    } else {\n      this.setState({error: true});\n    }\n  }\n\n  render() {\n    const {name, password, error} = this.state;\n    return (\n      <div>\n        <section className=\"section\">\n          <div className=\"container\">\n            <h1 className=\"title\">Chat Login</h1>\n            <form>\n              <div className=\"field\">\n                <label className=\"label\">Name</label>\n                <div className=\"control\">\n                  <input className=\"input\" type=\"text\" name=\"name\" value={name}\n                    onChange={this.handleChange.bind(this)} />\n                </div>\n              </div>\n              <div className=\"field\">\n                <label className=\"label\">Password</label>\n                <div className=\"control\">\n                  <input className=\"input\" type=\"password\" name=\"password\" value={password}\n                    onChange={this.handleChange.bind(this)} />\n                </div>\n              </div>\n              <div className=\"field\">\n                {error &&\n                  <p className=\"help is-danger\">Invalid Credentials</p>\n                }                \n                <div className=\"control\">\n                  <button className=\"button is-link\"\n                    onClick={this.handleSubmit.bind(this)}>Login</button>\n                </div>\n              </div>\n            </form>\n          </div>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import React, { Component } from 'react';\n\nclass NavBar extends Component {\n  render() {\n    const {onLogout} = this.props;\n    return (\n      <nav className=\"nabar\">\n        <div className=\"navbar-end\">\n          <button className=\"button navbar-item\"\n            onClick={onLogout}>Logout</button>\n        </div>\n      </nav>\n    );\n  }  \n}\n\nexport default NavBar;\n","import { ApolloProvider } from '@apollo/react-hooks';\nimport React, { Component } from 'react';\nimport { getLoggedInUser, logout } from './auth';\nimport client from './graphql/client';\nimport Chat from './Chat';\nimport Login from './Login';\nimport NavBar from './NavBar';\n\nclass App extends Component {\n  state = {user: getLoggedInUser()};\n\n  handleLogin(user) {\n    this.setState({user});\n  }\n\n  handleLogout() {\n    logout();\n    this.setState({user: null});\n  }\n\n  render() {\n    const {user} = this.state;\n    if (!user) {\n      return <Login onLogin={this.handleLogin.bind(this)} />;\n    }\n    return (\n      <ApolloProvider client={client}>\n        <NavBar onLogout={this.handleLogout.bind(this)} />\n        <Chat user={user} />\n      </ApolloProvider>\n    );  \n  }\n}\n\nexport default App;\n","import 'bulma/css/bulma.css';\nimport './style.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}